package cveBrowser;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import model.EntryType;
import model.Nvd;

@Controller
public class ApplicationController {

	@Autowired
	private XmlService xmlService;
	private int pageSize = 50;

	@RequestMapping("/")
	public String showView(Model model) {
		return "redirect:cve/2017/1";
	}

	@RequestMapping("cve/{year}/{page}")
	public String showView(Model model, @PathVariable Integer page, @PathVariable Integer year) {
		if (year < 2002 || year > 2017) {
			year = 2017;
		}
		if (page <= 0) {
			page = 1;
		}
		Nvd nvdModel = xmlService.getNvdModel(year);
		EntryWrapper entiresWrapper = new EntryWrapper();
		Collections.sort(nvdModel.getEntry(), (obj1, obj2) -> obj1.getName().compareTo(obj2.getName()));
		try {
			entiresWrapper.setEntries(
					nvdModel.getEntry().subList((page - 1) * pageSize, (pageSize - 1) + (page - 1) * pageSize));
		} catch (Exception io) {
			entiresWrapper.setEntries(nvdModel.getEntry().subList(nvdModel.getEntry().size() - (pageSize + 1),
					nvdModel.getEntry().size() - 1));
		}
		int pages = Math.round((nvdModel.getEntry().size() / 50));
		model.addAttribute("entiresWrapper", entiresWrapper);
		model.addAttribute("pages", pages);
		model.addAttribute("currentPage", page);
		model.addAttribute("currentYear", year);
		model.addAttribute("direction", "ASC");
		model.addAttribute("vuln", new SearchForm());
		return "view";
	}

	@RequestMapping(value = "cve/{year}/{page}", method = RequestMethod.POST)
	public String showFounded(@ModelAttribute("vuln") SearchForm vuln, Model model, @PathVariable Integer page, @PathVariable Integer year) {
		if (year < 2002 || year > 2017) {
			year = 2017;
		}
		if (page <= 0) {
			page = 1;
		}
		String formYear = vuln.getName().split("-")[1];
		Nvd nvdModel = xmlService.getNvdModel(Integer.parseInt(formYear));
		EntryWrapper entiresWrapper = new EntryWrapper();
		List<EntryType> list = new ArrayList<EntryType>();
		for (EntryType entry : nvdModel.getEntry()) {
			if (entry.getName().contains(vuln.getName())) {
				list.add(entry);
			}
		}
		if (list.size() < 50) {
			entiresWrapper.setEntries(list);
		} else {
			try {
				entiresWrapper.setEntries(list.subList((page - 1) * pageSize, (pageSize - 1) + (page - 1) * pageSize));
			} catch (Exception io) {
				entiresWrapper.setEntries(list.subList(list.size() - (pageSize + 1), list.size() - 1));
			}
		}
		int pages = Math.round((list.size() / 50));
		model.addAttribute("entiresWrapper", entiresWrapper);
		model.addAttribute("pages", pages);
		model.addAttribute("currentPage", page);
		model.addAttribute("currentYear", year);
		model.addAttribute("vuln", new SearchForm());
		model.addAttribute("direction", "ASC");
		return "view";
	}

	@RequestMapping(value = "cve/{year}/{page}/sortedByScore{direction}")
	public String showSortedASC(@ModelAttribute("vuln") SearchForm vuln, Model model, @PathVariable Integer page,
			@PathVariable Integer year, @PathVariable String direction) {
		if (year < 2002 || year > 2017) {
			year = 2017;
		}
		if (page <= 0) {
			page = 1;
		}
		Nvd nvdModel = xmlService.getNvdModel(year);
		EntryWrapper entiresWrapper = new EntryWrapper();
		if ("ASC".equals(direction)) {
			Collections.sort(nvdModel.getEntry(), (obj1, obj2) -> obj1.getCvssScore().compareTo(obj2.getCvssScore()));
			model.addAttribute("direction", "DESC");
		} else {
			Collections.sort(nvdModel.getEntry(),
					(obj1, obj2) -> (-1) * obj1.getCvssScore().compareTo(obj2.getCvssScore()));
			model.addAttribute("direction", "ASC");
		}
		try {
			entiresWrapper.setEntries(nvdModel.getEntry().subList((page - 1) * pageSize, (pageSize - 1) + (page - 1) * pageSize));
		} catch (Exception io) {
			entiresWrapper.setEntries(nvdModel.getEntry().subList(nvdModel.getEntry().size() - (pageSize + 1), nvdModel.getEntry().size() - 1));
		}
		int pages = Math.round((nvdModel.getEntry().size() / 50));
		model.addAttribute("entiresWrapper", entiresWrapper);
		model.addAttribute("pages", pages);
		model.addAttribute("currentPage", page);
		model.addAttribute("currentYear", year);
		model.addAttribute("vuln", new SearchForm());
		return "view";
	}

	/*
	@PostMapping("/upload")
	public String showUploaded(Model model, @RequestParam("file") MultipartFile file) {

		Nvd nvdModel = null;
		try {
			nvdModel = xmlService.loadNvdModelInputStream(file.getInputStream(), 0);
		} catch (IOException e) {
			e.printStackTrace();
		}
		EntryWrapper entiresWrapper = new EntryWrapper();
		entiresWrapper.setEntries(nvdModel.getEntry());
		model.addAttribute("entiresWrapper", entiresWrapper);
		model.addAttribute("vuln", new SearchForm());
		return "view";
	}
	 */
}
